/**
 * ---------------------------------------------------------------------------------
 * This file has been generated by Sanity TypeGen.
 * Command: `sanity typegen generate`
 *
 * Any modifications made directly to this file will be overwritten the next time
 * the TypeScript definitions are generated. Please make changes to the Sanity
 * schema definitions and/or GROQ queries if you need to update these types.
 *
 * For more information on how to use Sanity TypeGen, visit the official documentation:
 * https://www.sanity.io/docs/sanity-typegen
 * ---------------------------------------------------------------------------------
 */

// Source: schema.json
export type BlockContent = Array<
  | {
      children?: Array<{
        marks?: Array<string>;
        text?: string;
        _type: 'span';
        _key: string;
      }>;
      style?: 'normal' | 'h1' | 'h2' | 'h3' | 'h4' | 'blockquote';
      listItem?: 'bullet' | 'number';
      markDefs?: Array<{
        href?: string;
        _type: 'link';
        _key: string;
      }>;
      level?: number;
      _type: 'block';
      _key: string;
    }
  | {
      asset?: {
        _ref: string;
        _type: 'reference';
        _weak?: boolean;
        [internalGroqTypeReferenceTo]?: 'sanity.imageAsset';
      };
      media?: unknown;
      hotspot?: SanityImageHotspot;
      crop?: SanityImageCrop;
      _type: 'image';
      _key: string;
    }
>;

export type Service = {
  _id: string;
  _type: 'service';
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  name?: string;
  id?: Slug;
  shortDescription?: string;
  description?: string;
  categories?: Array<string>;
  icon?:
    | 'monitor'
    | 'code'
    | 'smartphone'
    | 'database'
    | 'cloud'
    | 'shield'
    | 'chart'
    | 'palette'
    | 'rocket'
    | 'settings';
  heroSection?: {
    tagline?: string;
    headline?: string;
    subheadline?: string;
  };
  features?: Array<{
    title?: string;
    description?: string;
    icon?:
      | 'code'
      | 'zap'
      | 'users'
      | 'palette'
      | 'shield'
      | 'gauge'
      | 'gitbranch'
      | 'globe'
      | 'smartphone'
      | 'rocket';
    _key: string;
  }>;
  technologies?: Array<{
    name?: string;
    icon?: string;
    _key: string;
  }>;
  processSteps?: Array<{
    number?: string;
    title?: string;
    description?: string;
    _key: string;
  }>;
  benefits?: Array<string>;
  whyChooseUs?: {
    headline?: string;
    description?: string;
    reasons?: Array<{
      title?: string;
      description?: string;
      icon?: 'users' | 'zap' | 'shield' | 'code' | 'rocket';
      _key: string;
    }>;
  };
  ctaSection?: {
    headline?: string;
    description?: string;
    primaryButtonText?: string;
    secondaryButtonText?: string;
  };
  seo?: {
    metaTitle?: string;
    metaDescription?: string;
  };
};

export type Project = {
  _id: string;
  _type: 'project';
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  priority?: number;
  name?: string;
  slug?: Slug;
  description?: string;
  category?: string;
  technologies?: Array<string>;
  logo?: {
    asset?: {
      _ref: string;
      _type: 'reference';
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: 'sanity.imageAsset';
    };
    media?: unknown;
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    _type: 'image';
  };
  url?: string;
  projectDimensions?: {
    timeline?: {
      value?: number;
      unit?: 'Week(s)' | 'Month(s)' | 'Year(s)';
    };
    teamSize?: number;
    iterations?: number;
    technologies?: number;
  };
  coverImages?: Array<{
    asset?: {
      _ref: string;
      _type: 'reference';
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: 'sanity.imageAsset';
    };
    media?: unknown;
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    alt?: string;
    _type: 'image';
    _key: string;
  }>;
  projectSections?: Array<{
    id?: string;
    name?: string;
    description?: BlockContent;
    images?: Array<{
      asset?: {
        _ref: string;
        _type: 'reference';
        _weak?: boolean;
        [internalGroqTypeReferenceTo]?: 'sanity.imageAsset';
      };
      media?: unknown;
      hotspot?: SanityImageHotspot;
      crop?: SanityImageCrop;
      alt?: string;
      _type: 'image';
      _key: string;
    }>;
    _key: string;
  }>;
};

export type SanityImagePaletteSwatch = {
  _type: 'sanity.imagePaletteSwatch';
  background?: string;
  foreground?: string;
  population?: number;
  title?: string;
};

export type SanityImagePalette = {
  _type: 'sanity.imagePalette';
  darkMuted?: SanityImagePaletteSwatch;
  lightVibrant?: SanityImagePaletteSwatch;
  darkVibrant?: SanityImagePaletteSwatch;
  vibrant?: SanityImagePaletteSwatch;
  dominant?: SanityImagePaletteSwatch;
  lightMuted?: SanityImagePaletteSwatch;
  muted?: SanityImagePaletteSwatch;
};

export type SanityImageDimensions = {
  _type: 'sanity.imageDimensions';
  height?: number;
  width?: number;
  aspectRatio?: number;
};

export type SanityImageHotspot = {
  _type: 'sanity.imageHotspot';
  x?: number;
  y?: number;
  height?: number;
  width?: number;
};

export type SanityImageCrop = {
  _type: 'sanity.imageCrop';
  top?: number;
  bottom?: number;
  left?: number;
  right?: number;
};

export type SanityFileAsset = {
  _id: string;
  _type: 'sanity.fileAsset';
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  originalFilename?: string;
  label?: string;
  title?: string;
  description?: string;
  altText?: string;
  sha1hash?: string;
  extension?: string;
  mimeType?: string;
  size?: number;
  assetId?: string;
  uploadId?: string;
  path?: string;
  url?: string;
  source?: SanityAssetSourceData;
};

export type SanityImageAsset = {
  _id: string;
  _type: 'sanity.imageAsset';
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  originalFilename?: string;
  label?: string;
  title?: string;
  description?: string;
  altText?: string;
  sha1hash?: string;
  extension?: string;
  mimeType?: string;
  size?: number;
  assetId?: string;
  uploadId?: string;
  path?: string;
  url?: string;
  metadata?: SanityImageMetadata;
  source?: SanityAssetSourceData;
};

export type SanityImageMetadata = {
  _type: 'sanity.imageMetadata';
  location?: Geopoint;
  dimensions?: SanityImageDimensions;
  palette?: SanityImagePalette;
  lqip?: string;
  blurHash?: string;
  hasAlpha?: boolean;
  isOpaque?: boolean;
};

export type Geopoint = {
  _type: 'geopoint';
  lat?: number;
  lng?: number;
  alt?: number;
};

export type Slug = {
  _type: 'slug';
  current?: string;
  source?: string;
};

export type SanityAssetSourceData = {
  _type: 'sanity.assetSourceData';
  name?: string;
  id?: string;
  url?: string;
};

// Extended types for GROQ query results with URL fields
export type ProjectWithQueryFields = Project & {
  coverImage?: string; // First cover image URL
  logoUrl?: string; // Logo asset URL
  githubUrl?: string;
  coverImages?: Array<{
    asset?: {
      _ref: string;
      _type: 'reference';
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: 'sanity.imageAsset';
    };
    media?: unknown;
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    alt?: string;
    url?: string; // This is the URL field we need
    _type: 'image';
    _key: string;
  }>;
  projectSections?: Array<{
    _id?: string;
    id?: string;
    name?: string;
    description?: BlockContent;
    images?: Array<{
      asset?: {
        _ref: string;
        _type: 'reference';
        _weak?: boolean;
        [internalGroqTypeReferenceTo]?: 'sanity.imageAsset';
      };
      media?: unknown;
      hotspot?: SanityImageHotspot;
      crop?: SanityImageCrop;
      alt?: string;
      url?: string; // This is the URL field we need
      _type: 'image';
      _key: string;
    }>;
    _key: string;
  }>;
};

export type AllSanitySchemaTypes =
  | BlockContent
  | Service
  | Project
  | ProjectWithQueryFields
  | SanityImagePaletteSwatch
  | SanityImagePalette
  | SanityImageDimensions
  | SanityImageHotspot
  | SanityImageCrop
  | SanityFileAsset
  | SanityImageAsset
  | SanityImageMetadata
  | Geopoint
  | Slug
  | SanityAssetSourceData;
export declare const internalGroqTypeReferenceTo: unique symbol;
